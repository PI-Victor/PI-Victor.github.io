<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>grpc on Software and Ops</title>
    <link>https://victor.cloudflavor.io/tags/grpc/</link>
    <description>Recent content in grpc on Software and Ops</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 Jan 2021 03:06:04 +0100</lastBuildDate><atom:link href="https://victor.cloudflavor.io/tags/grpc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gRPC Web</title>
      <link>https://victor.cloudflavor.io/2021/01/grpc-web/</link>
      <pubDate>Sun, 03 Jan 2021 03:06:04 +0100</pubDate>
      
      <guid>https://victor.cloudflavor.io/2021/01/grpc-web/</guid>
      <description>In this posts we will explore how to make a frontend, written in React, talk to a gRPC service.
gRPC and the web Browsers can&amp;rsquo;t talk to gRPC services natively so the solution came in the form of a proxy that could translate the frontend http requests made by the browser to gRPC calls that the backend gRPC service could understand.
These solutions are differently implemented in both libraries that emerged to tackle this problem.</description>
    </item>
    
    <item>
      <title>Make your life with gRPC easier</title>
      <link>https://victor.cloudflavor.io/2020/12/make-your-life-with-grpc-easier/</link>
      <pubDate>Sun, 13 Dec 2020 05:02:27 +0100</pubDate>
      
      <guid>https://victor.cloudflavor.io/2020/12/make-your-life-with-grpc-easier/</guid>
      <description>Earlier this year i started to write a lot of gRPC services and after a while fiddling around, there are things that are worth mentioning for the uninitiated.
Design documentation I found the Google API design documentation useful for making you adopt some standards for your APIs early on. You don&amp;rsquo;t have to follow it word by word, but overall it definitely has its use. From mapping http methods to gRPC methods to naming conventions that help you design your API intuitive for future growth.</description>
    </item>
    
  </channel>
</rss>
